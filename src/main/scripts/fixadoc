#!/bin/sh -- # This comment tells perl not to loop!
#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 2017 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://oss.oracle.com/licenses/CDDL+GPL-1.1
# or LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#

# fixadoc file ...
#
#	fix asciidoc output from pandoc for the Java EE Tutorial files
#	given file.txt, the fixed output is in file.adoc

#
eval 'exec perl -S $0 "$@"'
if 0;

if ($#ARGV >= 0) {
	foreach $arg (@ARGV) {
		$out = $arg;
		$out =~ s/(\.[a-z]*)?$/.adoc/;
		$stat = &fixadoc($arg, $out);
	}
} else {
	printf "Usage: fixadoc file ...\n";
	exit 1;
}

local($lastlen) = 0;
local($prevprev) = undef;
local($prev) = undef;

#
# putline(FD, line)
#
#	buffers the previous two lines before writing them so we can
#	go back and unwrap them if necessary (see &unwrapprev).
#
sub putline {
	local($OUTF, $line) = @_;

	$line =~ s/jeett_dt_/javaeett_dt_/g;
	$line =~ s:\.\./\.\./dcommon/gifs:img:;
	$line =~ s:\.\./\.\./dcommon/html/::;
	$line =~ s/\.htm([^l])/.html\1/g;
	printf $OUTF "%s\n", $prevprev if (defined($prevprev));
	$prevprev = $prev;
	$prev = $line;
	$lastlen = length($prev);
}

#
# unwraprev
#
#	unwrap the previous two lines, combining them into one.
#
sub unwrapprev {
	$prev = $prevprev . " " . $prev;
	$lastlen = length($prev);
	undef($prevprev);
}

#
# flushout(FD)
#
#	flush buffered lines to FD.
#
sub flushout {
	local($OUTF) = @_;
	printf $OUTF "%s\n", $prevprev if (defined($prevprev));
	printf $OUTF "%s\n", $prev;
	undef($prevprev);
	undef($prev);
}

#
# fixadoc(input-file, output-file)
#
#	if outfile-file is the same as input-file, the output is generated
#	into output-file+ and then renamed.
#
sub fixadoc {

local($in, $out) = @_;

local($inplace) = 0;
if ($out eq $in) {
	$inplace = 1;
	$out = $in . "+";
}

if (!open(IN, $in)) {
	printf "%s: can not open\n", $in;
	return 0;
}

if (!open(OUT, ">" . $out)) {
	printf "%s: can not write\n", $out;
	close(IN);
	return 0;
}

local($title);
local($saw_copyright) = 0;
local($img_text) = 0;

# read the title line(s)

title_line:
while (<IN>) {
	s/\r?\n$//;
	if (/type=page/) {
		printf "%s: already fixed\n", $arg;
		close(OUT);
		close(IN);
		unlink($out);
		return 0;
	}
	last title_line if (/^=/);
	$title = $title . $_ . ' ';
}

$title =~ s/ $//;

if ($title =~ /\.eps$/) {
	$img_text = 1;
	$title =~ s/\.eps//;
	$title =~ s/jeett/javaeett/;
	$_ =~ s/=//;
}
$break = $_;

# if this is an img_text file, handle it specially

if ($img_text) {
	&putline(OUT, "type=page");
	&putline(OUT, "status=published");
	&putline(OUT, "title=$title");
	&putline(OUT, "~~~~~~");
	&putline(OUT, "$title");
	&putline(OUT, "$break");
	while (<IN>) {
		s/\r?\n$//;
		s/jeett_dt_/javaeett_dt_/g;
		&putline(OUT, $_);
	}
	&flushout(OUT);
	close(OUT);
	close(IN);
	if ($inplace) {
		rename($out, $in);
	}
	return 1;
}

# read and throw away header lines up to the [[BEGIN]] line.
# remember the navigation links.

local($nextlink) = undef;
local($prevlink) = undef;
header_line:
while (<IN>) {
	s/\r?\n$//;
	last header_line if (/\[\[BEGIN]]/);
	if (/leftnav\.gif/) {
		($prevlink = $_) =~ s/.*link:([^.]*)\.htm.*/\1.html/;
	} elsif (/rightnav\.gif/) {
		($nextlink = $_) =~ s/.*link:([^.]*)\.htm.*/\1.html/;
	}
}

# print the jekyl header

&putline(OUT, "type=page");
&putline(OUT, "status=published");
&putline(OUT, "title=$title");
&putline(OUT, "next=$nextlink") if defined($nextlink);
&putline(OUT, "prev=$prevlink") if defined($prevlink);
&putline(OUT, "~~~~~~");
&putline(OUT, "$title");
&putline(OUT, "$break");

# read lines of the body until we get to the footer table

local($table_boundary) = 0;
local($table_end) = 0;
local($plus_line) = 0;

body_line:
while (<IN>) {
	s/\r?\n$//;
	last body_line if (/\[width="66%",cols="50%,,50%",]/);
	next body_line if (/^\[\[JEETT/);	# remove the "JEE" anchors
	if (/^Beta Draft:/) {
		<IN>;
		next body_line;
	}
	if (/^-{5,}/) {
		if (length != $lastlen) {
			#printf "%s: %d: WARNING, bad table?\n", $arg, $.;
			&unwrapprev;
		}
	}
	if (/^~{5,}/) {
		if (length == $lastlen - 1) {
			$_ = $_ . "~";	# fix it
		} elsif (length != $lastlen) {
			#printf "%s: %d: WARNING, bad section title?\n", $arg, $.;
			&unwrapprev;
			if (length == $lastlen - 1) {
				$_ = $_ . "~";	# fix it
			}
		}
	}
	# a table followed by a line with just " +"
	if ($table_end) {
		$table_end = 0;
		if (/^ \+$/) {
			next body_line;
		}
	} elsif ($table_boundary) {
		$table_boundary = 0;
		if (/^$/) {
			$table_end = 1;
		} else {
			$table_end = 0;
		}
	} elsif (/^\|={5,}/) {
		$table_boundary = 1;
	}
	# a line with just "+" followed by a line with just " +"
	if ($plus_line) {
		$plus_line = 0;
		if (/^ \+$/) {
			next body_line;
		}
	} elsif (/^\+$/) {
		$plus_line = 1;
	} else {
		$plus_line = 0;
	}
	# a sub-bullet not preceded by a blank line
	if (/^\*\* / && $lastlen != 0) {
		&putline(OUT, "");
	}
	&putline(OUT, $_);
}

# get rid of trailing separator
if ($prevprev eq "'''''") {
	undef($prevprev);
	undef($prev);
}

&flushout(OUT);
close(OUT);
close(IN);

if ($inplace) {
	rename($out, $in);
}

return 1;	# success
}
